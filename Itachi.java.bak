import greenfoot.*;  // (World, Actor, GreenfootImage, Greenfoot and MouseInfo)

/**
 * Write a description of class Itachi here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class Itachi extends GravityBound {
    /* animation */
    private final GreenfootImage[] itachiRight;
    private final GreenfootImage[] itachiLeft;
    private final GreenfootImage[] itachiStillRight;
    private final GreenfootImage[] itachiStillLeft;
    private int index = 0;
    private int counter = 0;
    // number of acts to change to the next image
    private final static int INTERVAL = 10;
    // record the movement status @NotNull
    private String status = "stillRight";

    /* movement */
    private final static int SPEED = 4;
    private final static int JUMP_STRENGTH = 12;
    // vSpeed: vertical speed, positive is up
    private boolean jumpPressing = false;
    private final static int MAX_JUMP_TIMES = 2;
    private int jumpCount = 0;

    /* attack */
    // fireball
    private final static int ENERGY_MAX = 20;
    private int energy = ENERGY_MAX;
    private final static int ENERGY_INTERVAL = 20;
    private int energyCounter = ENERGY_INTERVAL;
    private boolean fireballPressing = false;
    // shuriken
    private final static int SHURIKEN_INTERVAL = 15;
    private int shurikenCounter = SHURIKEN_INTERVAL;
    private int shurikenLeft = 20;
    private boolean shurikenReady = true;

    /* key arrangement */
    private final static String KEY_LEFT = "a";
    private final static String KEY_RIGHT = "d";
    private final static String KEY_JUMP = "k";
    private final static String KEY_FIREBALL = "i";
    private final static String KEY_SHURIKEN = "u";

    public Itachi() {
        // Image array for moving
        itachiRight = new GreenfootImage[6];
        itachiLeft = new GreenfootImage[6];
        for (int i = 0; i < 6; ++i) {
            GreenfootImage img;
            img = new GreenfootImage("itachi/running-right-itachi-" + (i + 1) + ".png");
            itachiRight[i] = new GreenfootImage(img);
            img.mirrorHorizontally();
            itachiLeft[i] = new GreenfootImage(img);
        }
        // Image array for still
        itachiStillRight = new GreenfootImage[7];
        itachiStillLeft = new GreenfootImage[7];
        for (int i = 0; i < 7; ++i) {
            GreenfootImage img;
            img = new GreenfootImage("itachi/standing-still-right-itachi-" + (i + 1) + ".png");
            itachiStillRight[i] = new GreenfootImage(img);
            img.mirrorHorizontally();
            itachiStillLeft[i] = new GreenfootImage(img);
        }
        // Set initial image
        setImage(itachiStillRight[0]);
    }

    /**
     * Act - do whatever the Itachi wants to do. This method is called whenever
     * the 'Act' or 'Run' button gets pressed in the environment.
     */
    public void act() {
        checkKeyPress();
        if (isLanded())
            setVSpeed(0);
        else
            gravityFall();
        restoreEnergy();
        coolDownShuriken();
    }

    public void checkKeyPress() {
        boolean left = Greenfoot.isKeyDown(KEY_LEFT);
        boolean right = Greenfoot.isKeyDown(KEY_RIGHT);
        boolean jump = Greenfoot.isKeyDown(KEY_JUMP);
        boolean fireball = Greenfoot.isKeyDown(KEY_FIREBALL);
        boolean shuriken = Greenfoot.isKeyDown(KEY_SHURIKEN);

        // move
        if (left ^ right) {
            if (left) {
                setLocation(getX() - SPEED, getY());
                animateMove("left");
            } else {
                setLocation(getX() + SPEED, getY());
                animateMove("right");
            }
        }
        // still
        else {
            if (status.equals("stillLeft") || status.equals("left"))
                animateStill("stillLeft");
            else
                animateStill("stillRight");
        }

        // jump
        if (jump) {
            if (!jumpPressing)
                jump();
            jumpPressing = true;
        } else {
            jumpPressing = false;
        }

        // shoot fireball
        if (fireball) {
            if (!fireballPressing)
                shootFireball();
            fireballPressing = true;
        } else {
            fireballPressing = false;
        }

        // throw shuriken
        if (shuriken) {
            shootShuriken();
        }
    }

    public void animateMove(String direction) {
        checkPreviousStatus(direction);
        if (direction.equals("left"))
            setImage(itachiLeft[index]);
        else
            setImage(itachiRight[index]);

        increaseCounter(itachiLeft.length);
    }

    public void animateStill(String direction) {
        checkPreviousStatus(direction);
        if (direction.equals("stillLeft"))
            setImage(itachiStillLeft[index]);
        else
            setImage(itachiStillRight[index]);

        increaseCounter(itachiStillLeft.length);
    }

    public void checkPreviousStatus(String curStatus) {
        if (!curStatus.equals(status)) {
            index = 0;
            counter = 0;
        }
        status = curStatus;
    }

    public void increaseCounter(int maxImgIndex) {
        // increase counter
        if (++counter >= INTERVAL) {
            counter = 0;
            // increase index
            if (++index >= maxImgIndex) {
                index = 0;
            }
        }
    }

    public void jump() {
        if (isLanded()) {
            jumpCount = 0;
        }
        jumpCount++;
        if (jumpCount <= MAX_JUMP_TIMES) {
            setVSpeed(JUMP_STRENGTH);
            gravityFall();
        }
    }

    public void shootFireball() {
        int rotation;
        if (status.equals("left") || status.equals("stillLeft")) {
            rotation = 180;
            if (!isLanded()) {
                rotation -= 30;
            }
        } else {
            rotation = 0;
            if (!isLanded()) {
                rotation += 30;
            }
        }
        int x = getX();
        int y = getY() - getImage().getHeight() / 3;
        getWorld().addObject(new Fireball(rotation, energy * 10), x, y);
        energy = 0;
        showEnergy();
    }

    public void restoreEnergy() {
        if (++energyCounter >= ENERGY_INTERVAL) {
            energyCounter = 0;
            if (energy < ENERGY_MAX) {
                energy++;
            }
            showEnergy();
        }
    }

    public void showEnergy() {
        String energyText = "Energy: " + "=".repeat(Math.max(0, energy));
        getWorld().showText(energyText, 200, 50);
    }

    public void shootShuriken() {
        if (!shurikenReady || shurikenLeft < 0) {
            return;
        }
        int rotation;
        if (status.equals("left") || status.equals("stillLeft")) {
            rotation = 180;
        } else {
            rotation = 0;
        }
        int x = getX();
        int y = getY() - getImage().getHeight() / 2;
        getWorld().addObject(new Shuriken(rotation), x, y);
        shurikenLeft--;
        shurikenReady = false;
        shurikenCounter = 0;
        showShuriken();
    }

    public void coolDownShuriken() {
        if (shurikenCounter < SHURIKEN_INTERVAL) {
            shurikenCounter++;
        } else {
            shurikenReady = true;
        }
    }

    public void showShuriken() {
        String shurikenText = "Shuriken: " + "=".repeat(Math.max(0, shurikenLeft));
        getWorld().showText(shurikenText, 550, 50);
    }
}
